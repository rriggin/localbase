#!/usr/bin/env python3
"""
Deploy Chart to Surge.sh

Test tool for deploying charts to Surge.sh with random subdomain generation.
"""

import sys
import os
from datetime import datetime

# Add the project root to the path
sys.path.append(os.path.join(os.path.dirname(__file__), '../'))

# Load environment variables
from config.env import load_env
load_env()

from src.services.surge.client import SurgeService
from src.services.surge.models import SurgeConfig

def main():
    """Deploy the latest timeline chart to Surge.sh."""
    
    print("🚀 SURGE.SH CHART DEPLOYMENT")
    print("=" * 60)
    print("📊 Deploying interactive charts to public URLs with random domains")
    print()
    
    # Initialize Surge service
    try:
        surge_config = {}  # No special config needed for basic deployment
        surge_service = SurgeService(surge_config)
        
        print("✅ Surge.sh service initialized")
        
        # Check service health
        health = surge_service.health_check()
        print(f"🏥 Service status: {health['status']}")
        print(f"🔧 CLI available: {health['cli_available']}")
        print(f"📋 Version: {health.get('surge_version', 'unknown')}")
        
        if health['status'] == 'unhealthy':
            print(f"❌ Service unhealthy: {health.get('error', 'Unknown error')}")
            print("\n💡 Make sure Surge CLI is installed:")
            print("   npm install -g surge")
            return
        
    except Exception as e:
        print(f"❌ Failed to initialize Surge service: {e}")
        return
    
    # Find the latest timeline chart
    print(f"\n📁 FINDING LATEST TIMELINE CHART")
    print("-" * 40)
    
    charts_dir = 'data/visualizations'
    if not os.path.exists(charts_dir):
        print(f"❌ Charts directory not found: {charts_dir}")
        return
    
    # Find timeline chart files
    timeline_files = []
    for file in os.listdir(charts_dir):
        if file.startswith('roofmaxx_deals_timeline_') and file.endswith('.html'):
            file_path = os.path.join(charts_dir, file)
            timeline_files.append((file_path, os.path.getmtime(file_path)))
    
    if not timeline_files:
        print("❌ No timeline chart files found")
        print("💡 Generate a chart first with: python3 tools/generate_deals_timeline_chart.py")
        return
    
    # Get the most recent file
    latest_file = max(timeline_files, key=lambda x: x[1])[0]
    file_name = os.path.basename(latest_file)
    
    print(f"📊 Found latest chart: {file_name}")
    print(f"📁 Path: {latest_file}")
    
    # Generate some random domain examples
    print(f"\n🎲 RANDOM DOMAIN EXAMPLES")
    print("-" * 30)
    for i in range(3):
        example_domain = surge_service.generate_random_domain()
        print(f"   • {example_domain}.surge.sh")
    
    # Deploy the chart
    print(f"\n🚀 DEPLOYING TO SURGE.SH")
    print("-" * 30)
    
    try:
        # Deploy with completely random domain
        deployment = surge_service.deploy_chart(
            chart_file_path=latest_file,
            chart_name="Timeline Chart"  # Only used for project metadata, not domain
        )
        
        if deployment.success:
            print("✅ DEPLOYMENT SUCCESSFUL!")
            print("=" * 50)
            print(f"🌐 Public URL: {deployment.url}")
            print(f"🏷️  Domain: {deployment.domain}")
            print(f"📊 Project: {deployment.project_name}")
            print(f"📁 Files: {deployment.file_count}")
            print(f"🕐 Deployed: {deployment.deployed_at.strftime('%Y-%m-%d %H:%M:%S')}")
            print()
            print("🎉 Your chart is now live on the internet!")
            print(f"🔗 Share this URL: {deployment.url}")
            
            # Save deployment info
            deployment_info = f"""# RoofMaxx Timeline Chart Deployment

**Deployed:** {deployment.deployed_at.strftime('%Y-%m-%d %H:%M:%S')}
**Public URL:** {deployment.url}
**Domain:** {deployment.domain}
**Local File:** {latest_file}

## Features
- Interactive D3.js multi-line chart
- Time period filters (Daily/Weekly/Monthly)
- Date range selector
- Color-coded reference table
- Hover tooltips with detailed data

## Data
- Total deals over time
- Non-billable leads (GRML, SG, DDSM, MICRO)
- Non-billable percentage

Generated by LocalBase RoofMaxx Data Agent
"""
            
            info_file = os.path.join(charts_dir, f"deployment_{deployment.domain.replace('.surge.sh', '')}.md")
            with open(info_file, 'w') as f:
                f.write(deployment_info)
            
            print(f"📝 Deployment info saved: {info_file}")
            
        else:
            print("❌ DEPLOYMENT FAILED!")
            print("=" * 40)
            print(f"🚫 Error: {deployment.error}")
            if deployment.error_details:
                print(f"📋 Details: {deployment.error_details}")
            
            # Common troubleshooting
            print(f"\n💡 TROUBLESHOOTING:")
            print("1. Make sure you're logged into Surge: surge login")
            print("2. Check your internet connection")
            print("3. Verify the file exists and is readable")
            
    except Exception as e:
        print(f"❌ Deployment error: {e}")
        return
    
    print(f"\n🎯 DEPLOYMENT COMPLETE!")

if __name__ == "__main__":
    main() 